syntax = "proto3";

package wallet;
option go_package = "./;wallet";

// SearchI is the input for searching wallets. Note that search queries for
// wallets must be authenticated. Also note that search queries for wallets are
// scoped to the calling user. That is, the caller can only ever search for
// their own wallets.
//
//     {
//         "filter": {
//             "paging": {
//                 "kind": "page",
//                 "strt": "0",
//                 "stop": "49"
//             }
//         },
//         "object": [
//             {
//                 "public": {
//                     "kind": "eth"
//                 }
//             }
//         ]
//     }
//
message SearchI {
  SearchI_Filter filter = 100;
  repeated SearchI_Object object = 200;
}

message SearchI_Filter {
  SearchI_Filter_Paging paging = 100;
}

message SearchI_Filter_Paging {
  string kind = 100;
  string strt = 200;
  string stop = 300;
}

message SearchI_Object {
  SearchI_Object_Intern intern = 100;
  SearchI_Object_Public public = 200;
  SearchI_Object_Symbol symbol = 300;
}

message SearchI_Object_Intern {
  // wllt is the ID of the wallet being searched.
  string wllt = 100;
}

message SearchI_Object_Public {
  // kind is the wallet type for which wallets are being searched.
  //
  //     eth for ethereum wallets
  //
  string kind = 100;
}

message SearchI_Object_Symbol {
  // crtr set to "dflt" returns the wallet objects representing the legitimate
  // content creators that the calling user enjoyed content from, in the form of
  // an event link click.
  string crtr = 100;
}

// SearchO is the output for searching wallets.
//
//     {
//         "object": [
//             {
//                 "intern": {
//                     "addr": {
//                         "time": "1695326765"
//                     },
//                     "crtd": "1689001255",
//                     "labl": {
//                         "time": "1695326765"
//                     },
//                     "user": "551265",
//                     "wllt": "338912367"
//                 },
//                 "public": {
//                     "addr": "0x0001",
//                     "kind": "eth",
//                     "labl": "accounting"
//                 }
//             },
//             ...
//         ]
//     }
//
message SearchO {
  SearchO_Filter filter = 100;
  repeated SearchO_Object object = 200;
}

message SearchO_Filter {}

message SearchO_Object {
  SearchO_Object_Intern intern = 100;
  SearchO_Object_Public public = 200;
}

message SearchO_Object_Intern {
  // addr contains lifecycle metadata for this wallet object.
  SearchO_Object_Intern_Addr addr = 100;
  // crtd is the unix timestamp in seconds at which the wallet got created.
  string crtd = 200;
  // labl contains lifecycle metadata for this wallet object.
  SearchO_Object_Intern_Labl labl = 300;
  // user is the ID of the user who created this wallet.
  string user = 400;
  // wllt is the ID of the wallet being searched.
  string wllt = 500;
}

message SearchO_Object_Intern_Addr {
  // Time is the unix timestamp in seconds of the most recent time at which this
  // wallet got re-validated by signing a message again.
  string time = 100;
}

message SearchO_Object_Intern_Labl {
  // Time is the unix timestamp in seconds of the most recent time at which the
  // wallet label got updated.
  string time = 100;
}

message SearchO_Object_Public {
  // addr is the hex encoded wallet address derived from the public key provided
  // during signature verification.
  string addr = 100;
  // kind is the wallet type.
  //
  //     eth for ethereum wallets
  //
  string kind = 200;
  // labl is the designated purpose this wallet serves. Kept empty at the time
  // of creation. Can be set after the signature verification challenge.
  //
  //     accounting for revenue sharing
  //     moderation for content moderation
  //
  string labl = 300;
}
