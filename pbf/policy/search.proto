syntax = "proto3";

package policy;
option go_package = "./;policy";

// SearchI is the input for searching policies.
//
//     {
//         "filter": {
//             "paging": {
//                 "perpage": "50",
//                 "pointer": "100"
//             }
//         },
//         "object": [
//             {
//                 "symbol": {
//                     "ltst": "default"
//                 }
//             }
//         ]
//     }
//
// For more information about the policy contracts, record types and SMAs, see
// the contracts repository on Github.
//
//     https://github.com/NaoNaoOnline/contracts
//
message SearchI {
  SearchI_Filter filter = 100;
  repeated SearchI_Object object = 200;
}

message SearchI_Filter {
  SearchI_Filter_Paging paging = 100;
}

message SearchI_Filter_Paging {
  string perpage = 100;
  string pointer = 200;
}

message SearchI_Object {
  SearchI_Object_Intern intern = 100;
  SearchI_Object_Public public = 200;
  SearchI_Object_Symbol symbol = 300;
}

message SearchI_Object_Intern {}

message SearchI_Object_Public {}

message SearchI_Object_Symbol {
  // ltst set to "default" returns the latest aggregated version of cached
  // policy records indexed from all onchain smart contracts configured. That
  // is, the list of aggregated records representing the currently active
  // authorization states.
  //
  // Note that indexing happens periodically in a background process, which can
  // be triggered by policy members to update the cached state on demand using
  // policy.API/Update.
  string ltst = 100;
}

// SearchO is the output for searching policies.
//
//     {
//         "filter": {
//             "paging": {
//                 "intotal": "750",
//                 "pointer": "150"
//             }
//         },
//         "object": [
//             {
//                 "extern": [
//                     {
//                         "chid": "42161"
//                     }
//                 ],
//                 "intern": {
//                     "user": "551265"
//                 },
//                 "public": {
//                     "acce": "2",
//                     "memb": "0x3456",
//                     "syst": "0"
//                 }
//             },
//             ...
//         ]
//     }
//
message SearchO {
  SearchO_Filter filter = 100;
  repeated SearchO_Object object = 200;
  repeated SearchO_Reason reason = 300;
}

message SearchO_Filter {
  SearchO_Filter_Paging paging = 100;
}

message SearchO_Filter_Paging {
  string intotal = 100;
  string pointer = 200;
}

message SearchO_Object {
  repeated SearchO_Object_Extern extern = 100;
  SearchO_Object_Intern intern = 200;
  SearchO_Object_Public public = 300;
}

message SearchO_Object_Extern {
  // chid is the chain ID, the unique identifier representing the blockchain
  // network on which this record is located.
  string chid = 100;
}

message SearchO_Object_Intern {
  // user is the user ID matched to this policy record on the fly, if available.
  // We do not persist the direct relationship between policy members and user
  // IDs because of several critical synchronization issues. The user ID will be
  // looked up on demand when searching for polices or when requesting
  // permission related resources and actions. Note that it might as well be
  // that there is no user association for a policy record intermittently.
  string user = 100;
}

message SearchO_Object_Public {
  // acce is the SMA record level, permission or role.
  string acce = 100;
  // memb is the SMA record account, identity or user.
  string memb = 200;
  // syst is the SMA record context, resource or scope.
  string syst = 300;
}

message SearchO_Reason {
  // desc provides some contextual information about decision making logic
  // inside the API that let to the returned result.
  string desc = 100;
  // kind is the human readable type information of the soft error code provided
  // with associated description.
  string kind = 200;
}
