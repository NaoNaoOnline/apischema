syntax = "proto3";

package policy;
option go_package = "./;policy";

// UpdateI is the input for updating policies.
//
//     {
//         "object": [
//             {
//                 "symbol": {
//                     "sync": "dflt"
//                 }
//             }
//         ]
//     }
//
message UpdateI {
  UpdateI_Filter filter = 100;
  repeated UpdateI_Object object = 200;
}

message UpdateI_Filter {}

message UpdateI_Object {
  UpdateI_Object_Intern intern = 100;
  UpdateI_Object_Public public = 200;
  UpdateI_Object_Symbol symbol = 300;
  repeated UpdateI_Object_Update update = 400;
}

message UpdateI_Object_Intern {}

message UpdateI_Object_Public {}

message UpdateI_Object_Symbol {
  // pntr must be left empty when initiating a new update lifecycle with sync
  // set to "dflt". As shown below, the update response contains a pointer that
  // can be provided in a delayed consecutive call, again with sync set to
  // "dflt". As long as the provided pointer equals the internally tracked
  // value, the background process to synchronize onchain and offchain state is
  // still in progress. Once the internal pointer differs from the provided pntr
  // value here, the status "updated" will be returned.
  string pntr = 100;
  // sync set to "dflt" starts a background process to synchronize onchain and
  // offchain state. That way the current state can be fetched on demand by
  // policy members without having to wait for the scheduled background job to
  // be triggered.
  string sync = 200;
}

message UpdateI_Object_Update {}

// UpdateO is the output for updating policies.
//
//     {
//         "object": [
//             {
//                 "intern": {
//                     "stts": "started"
//                 },
//                 "symbol": {
//                     "pntr": "1689001255"
//                 }
//             }
//         ]
//     }
//
message UpdateO {
  UpdateO_Filter filter = 100;
  repeated UpdateO_Object object = 200;
}

message UpdateO_Filter {}

message UpdateO_Object {
  UpdateO_Object_Intern intern = 100;
  UpdateO_Object_Public public = 200;
  UpdateO_Object_Symbol symbol = 300;
}

message UpdateO_Object_Intern {
  // stts is the resource status upon successful policy modification.
  //
  //     started for the first call when a new update lifecycle was initiated
  //     waiting for consecutive calls, as long as pointers are equal
  //     updated for finished lifecycle updates, as soon as pointers differ
  //
  string stts = 100;
}

message UpdateO_Object_Public {}

message UpdateO_Object_Symbol {
  // pntr is the internally tracked timestamp of the most recent update
  // lifecycle. The pointer returned here can be provided in a delayed
  // consecutive call, again with sync set to "dflt".
  string pntr = 100;
}
