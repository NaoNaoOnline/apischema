syntax = "proto3";

package description;
option go_package = "./;description";

// SearchI is the input for searching event descriptions.
//
//     {
//         "filter": [
//             "chunking": {
//                 "perpage": "50",
//                 "pointer": "100"
//             }
//         ],
//         "object": [
//             {
//                 "intern": {
//                     "evnt": "778237"
//                 }
//             }
//         ]
//     }
//
message SearchI {
  SearchI_Filter filter = 100;
  repeated SearchI_Object object = 200;
}

message SearchI_Filter {
  SearchI_Filter_Chunking chunking = 100;
}

message SearchI_Filter_Chunking {
  string perpage = 100;
  string pointer = 200;
}

message SearchI_Object {
  SearchI_Object_Intern intern = 100;
  SearchI_Object_Public public = 200;
}

message SearchI_Object_Intern {
  // evnt is the event ID for which descriptions are being searched.
  string evnt = 100;
}

message SearchI_Object_Public {}

// SearchO is the output for searching event descriptions.
//
//     {
//         "filter": [
//             "chunking": {
//                 "perpage": "50",
//                 "pointer": "150"
//             }
//         ],
//         "object": [
//             {
//                 "intern": {
//                     "crtd": "1689001255",
//                     "desc": "98972893",
//                     "user": "551265"
//                 },
//                 "public": {
//                     "evnt": "778237",
//                     "rctn": {
//                         "113714405": {
//                             "amnt": 7
//                         }
//                     },
//                     "text": "In this Hackathon we build awesome stuff!"
//                 }
//             },
//             ...
//         ]
//     }
//
message SearchO {
  SearchO_Filter filter = 100;
  repeated SearchO_Object object = 200;
}

message SearchO_Filter {}

message SearchO_Object {
  SearchO_Object_Intern intern = 100;
  SearchO_Object_Public public = 200;
}

message SearchO_Object_Intern {
  // crtd is the unix timestamp in seconds at which the description got created.
  string crtd = 100;
  // desc is the ID of the description being searched.
  string desc = 200;
  // user is the ID of the user who created this description.
  string user = 300;
}

message SearchO_Object_Public {
  // evnt is the event ID this description is mapped to.
  string evnt = 100;
  // TODO remove reaction map once vote API is implemented for managing
  // decoupled user reactions.
  //
  // rctn is the map of aggregated quality measurement for this description
  // based on user reactions where the map key is the reaction ID.
  map<string, SearchO_Object_Public_rctn> rctn = 200;
  // text is the description explaining what this event is about.
  string text = 300;
}

message SearchO_Object_Public_Rctn {
  // amnt is the number of times the accociated reaction got used.
  int32 amnt = 100;
}
