syntax = "proto3";

package subscription;
option go_package = "./;subscription";

// SearchI is the input for searching subscriptions. Note that search queries
// for subscriptions must be authenticated. Also note that search queries for
// subscriptions are scoped to the calling user. That is, the caller can only
// ever search for their own subscriptions.
//
//     {
//         "filter": {
//             "paging": {
//                 "strt": "0",
//                 "stop": "49"
//             }
//         },
//         "object": [
//             {
//                 "intern": {
//                     "subs": "98762362635"
//                 }
//             }
//         ]
//     }
//
message SearchI {
  SearchI_Filter filter = 100;
  repeated SearchI_Object object = 200;
}

message SearchI_Filter {
  SearchI_Filter_Paging paging = 100;
}

message SearchI_Filter_Paging {
  string strt = 100;
  string stop = 200;
}

message SearchI_Object {
  SearchI_Object_Intern intern = 100;
  SearchI_Object_Public public = 200;
}

message SearchI_Object_Intern {
  // subs is the ID of the subscription being searched.
  string subs = 100;
  // user is the ID of the user having created the subscription being searched.
  string user = 200;
}

message SearchI_Object_Public {
  // payr is the user ID of the user paying for the premium subscription being
  // searched.
  string payr = 100;
  // rcvr is the user ID of the user receiving the premium subscription being
  // searched.
  string rcvr = 200;
}

// SearchO is the output for searching subscriptions.
//
//     {
//         "object": [
//             {
//                 "intern": {
//                     "crtd": "1689001255",
//                     "stts": "success",
//                     "subs": "98762362635",
//                     "user": "551265"
//                 },
//                 "public": {
//                     "crtr": "0x2345",
//                     "payr": "551265",
//                     "rcvr": "551265",
//                     "unix": "1698793200"
//                 }
//             },
//             ...
//         ]
//     }
//
message SearchO {
  SearchO_Filter filter = 100;
  repeated SearchO_Object object = 200;
}

message SearchO_Filter {}

message SearchO_Object {
  SearchO_Object_Intern intern = 100;
  SearchO_Object_Public public = 200;
}

message SearchO_Object_Intern {
  // crtd is the unix timestamp in seconds at which the subscription got
  // created.
  string crtd = 100;
  // fail is the description explaining why a subscription could not be verified
  // successfully. Most subscriptions should not be accompanied by a failure
  // message.
  string fail = 200;
  // stts is the resource status expressing whether this subscription is active.
  // An active subscription is verified by comparing its offchain and onchain
  // state. Subscriptions found to be invalid will not be marked as active, but
  // will instead be accompanied by
  //
  //     created for a newly created subscriptions
  //     failure for successfully processed subscriptions
  //     success for processed subscriptions found to be invalid
  //
  string stts = 300;
  // subs is the ID of the subscription being searched.
  string subs = 400;
  // user is the ID of the user who created this subscription.
  string user = 500;
}

message SearchO_Object_Public {
  // crtr is the wallet address of a content creator designated for the purpose
  // of accounting. These are the creator addresses getting paid peer-to-peer by
  // users subscribing for accessing premium features.
  string crtr = 100;
  // payr is the user ID of the user paying for the premium subscription. This
  // is usually the same user ID as rcvr, but it does not have to be the same.
  // The idea here is that subscriptions can be gifted to other users.
  string payr = 200;
  // rcvr is the user ID of the user receiving the premium subscription.
  string rcvr = 300;
  // unix is the timestamp of the subscription period. This timestamp must be
  // represented in unix seconds, that is in UTC, pointing to the start of any
  // given month. For instance, 1698793200 is Wed Nov 01 2023 00:00:00 UTC,
  // which would subscribe for the whole month of November 2023.
  string unix = 400;
}
